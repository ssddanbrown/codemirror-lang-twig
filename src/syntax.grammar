@precedence {
  top,
  mid,
  lesser
}

@top Template { (InsertBlock | CodeBlock | PlainText)* }

@skip { space | BlockComment }


InsertBlock { "{{" expression* "}}" }
CodeBlock { "{%" CodeTag? !top expression* "%}"}

commaSep<content> { "" | content ("," content?)* }

expression {
  Function |
  Identifier |
  ChainedIdentifier |
  Comparison |
  Operator |
  CodeTag |
  Math |
  Array |
  basicType |
  hashStructure
}

basicType {
  String |
  Boolean |
  Number
}

functionParam {
  Identifier |
  basicType
}

FunctionParamList {
  "(" commaSep<functionParam> ")"
}

Array {
  "[" commaSep<functionParam> "]"
}


Function { Identifier !top FunctionParamList}

@tokens {
  PlainText { ![{] PlainText? | "{" (@eof | ![{#%] PlainText?) }

  Identifier { $[a-zA-Z_\-0-9]+ }
  ChainedIdentifier { Identifier ("." Identifier)+ }

  codeBlockTag { "set" | "extends" | "use" | "else" | "include" | "with" }
  codeOpenBlockTag { "apply" | "for" | "block" | "autoescape" | "verbatim" | "macro" | "if" }
  codeCloseBlockTag { "endapply" | "endfor" | "endif" | "endblock" | "endautoescape" | "endverbatim" | "endmacro" }
  CodeTag { codeBlockTag | codeOpenBlockTag | codeCloseBlockTag }

  Operator { "=" | "." | "|" }
  Math { "+" | "-" | "/" | "%" | "//" | "*" | "**"}
  Comparison { "and" | "or" | "not" | "==" | "!=" | "<" | ">" | ">=" | "<=" | "starts with" | "ends with" | "matches" | "in" | "not" | "is" }
  hashStructure { "{" | "}" | ":" | ","}

  Boolean { "true" | "false" }
  String { ("'" (![\\'] | "\\" _)* "'"?) | ("\"" (![\\"] | "\\" _)* "\""?) }
  Number { '-'? int frac? }
  int  { '0' | $[1-9] @digit* }
  frac { '.' @digit+ }

  @precedence { PlainText, Boolean, Number, CodeTag, Comparison, ChainedIdentifier, Operator, Math, Identifier, space, BlockComment, String }

  BlockComment { "{#" blockCommentRest }
  blockCommentRest { ![#] blockCommentRest | "#" blockCommentAfterHash }
  blockCommentAfterHash { "}" | "#" blockCommentAfterHash | ![}#] blockCommentRest }

  space { $[ \t\n\r]+ }

  "{{" "}}" "{%" "%}"
  "(" ")"
}

@detectDelim
